<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on 静心明志</title>
    <link>https://ottsion.github.io/categories/algorithm/</link>
    <description>Recent content in algorithm on 静心明志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 May 2019 17:37:20 +0800</lastBuildDate>
    
	<atom:link href="https://ottsion.github.io/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>组合总和</title>
      <link>https://ottsion.github.io/2019/%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</link>
      <pubDate>Fri, 24 May 2019 17:37:20 +0800</pubDate>
      
      <guid>https://ottsion.github.io/2019/%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</guid>
      <description>题目 给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。
candidates 中的数字可以无限制重复被选取。
说明：
 所有数字（包括 target）都是正整数。 解集不能包含重复的组合。  示例 1:
输入: candidates = [2,3,6,7], target = 7,所求解集为:[[7],[2,2,3]]示例 2:
输入: candidates = [2,3,5], target = 8,所求解集为:[[2,2,2,2],[2,3,3],[3,5]]代码 class Solution {List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ans = new ArrayList&amp;lt;&amp;gt;();;public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; combinationSum(int[] candidates, int target) {List&amp;lt;Integer&amp;gt; temp = new ArrayList&amp;lt;Integer&amp;gt;();getAns(candidates, target, 0, 0, temp);return ans;}private void getAns(int[] candidates, int target, int pos, int sum, List&amp;lt;Integer&amp;gt; temp) {if(sum==target)ans.</description>
    </item>
    
    <item>
      <title>829.连续整数求和</title>
      <link>https://ottsion.github.io/2019/%E8%BF%9E%E7%BB%AD%E6%95%B4%E6%95%B0%E6%B1%82%E5%92%8C/</link>
      <pubDate>Fri, 24 May 2019 16:59:00 +0800</pubDate>
      
      <guid>https://ottsion.github.io/2019/%E8%BF%9E%E7%BB%AD%E6%95%B4%E6%95%B0%E6%B1%82%E5%92%8C/</guid>
      <description>题目 给定一个正整数 N，试求有多少组连续正整数满足所有数字之和为 N?
示****例 1:
输入: 5输出: 2解释: 5 = 5 = 2 + 3，共有两组连续整数([5],[2,3])求和后为 5。示例 2:
输入: 9输出: 3解释: 9 = 9 = 4 + 5 = 2 + 3 + 4示例 3:
输入: 15输出: 4解释: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5说明: 1 &amp;lt;= N &amp;lt;= 10 ^ 9</description>
    </item>
    
    <item>
      <title>12.整数转罗马数字</title>
      <link>https://ottsion.github.io/2019/%E6%95%B0%E5%AD%97%E8%BD%AC%E7%BD%97%E9%A9%AC/</link>
      <pubDate>Fri, 24 May 2019 16:57:00 +0800</pubDate>
      
      <guid>https://ottsion.github.io/2019/%E6%95%B0%E5%AD%97%E8%BD%AC%E7%BD%97%E9%A9%AC/</guid>
      <description>题目 罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。
字符 数值I 1V 5X 10L 50C 100D 500M 1000例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
 I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。  给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</description>
    </item>
    
    <item>
      <title>198.打家劫舍</title>
      <link>https://ottsion.github.io/2019/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</link>
      <pubDate>Thu, 09 May 2019 17:45:45 +0800</pubDate>
      
      <guid>https://ottsion.github.io/2019/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</guid>
      <description>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你**在不触动警报装置的情况下，**能够偷窃到的最高金额。
示例 1:
输入: [1,2,3,1]输出: 4解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。偷窃到的最高金额 = 1 + 3 = 4 。示例 2:
输入: [2,7,9,3,1]输出: 12解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。偷窃到的最高金额 = 2 + 9 + 1 = 12 。代码：
public static int rob(int[] nums) {int length = nums.</description>
    </item>
    
    <item>
      <title>11.盛最多水的容器</title>
      <link>https://ottsion.github.io/2019/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Thu, 09 May 2019 16:57:00 +0800</pubDate>
      
      <guid>https://ottsion.github.io/2019/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>给定 n 个非负整数 a1，a2，&amp;hellip;，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
**说明：**你不能倾斜容器，且 n 的值至少为 2。
图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
示例:
输入: [1,8,6,2,5,4,8,3,7]输出: 49代码：
class Solution {public int maxArea(int[] height) {int maxeara = 0;int i=0, j=height.length-1;while(i&amp;lt;j){maxeara = Math.max(maxeara, Math.min(height[i], height[j])*(j-i));if(height[i]&amp;gt;height[j]) j--;else i++;}return maxeara;}}</description>
    </item>
    
    <item>
      <title>卡尔曼滤波算法理论</title>
      <link>https://ottsion.github.io/2016/2016-12-21-kalman-filter/</link>
      <pubDate>Wed, 21 Dec 2016 23:59:59 +0000</pubDate>
      
      <guid>https://ottsion.github.io/2016/2016-12-21-kalman-filter/</guid>
      <description>星期三, 21. 十二月 2016 07:57下午
 卡尔曼滤波是一种高效率的递归滤波器（自回归滤波器），它能够从一系列的不完全及包含噪声的测量中，估计动态系统的状态。
 卡尔曼滤波简介  卡尔曼滤波的一个典型实例是从一组有限的，包含噪声的，通过对物体位置的观察序列（可能有偏差）预测出物体的位置的坐标及速度。在很多工程应用（如雷达、计算机视觉）中都可以找到它的身影。同时，卡尔曼滤波也是控制理论以及控制系统工程中的一个重要课题。例如，对于雷达来说，人们感兴趣的是其能够跟踪目标。但目标的位置、速度、加速度的测量值往往在任何时候都有噪声。卡尔曼滤波利用目标的动态信息，设法去掉噪声的影响，得到一个关于目标位置的好的估计。这个估计可以是对当前目标位置的估计（滤波），也可以是对于将来位置的估计（预测），也可以是对过去位置的估计（插值或平滑）。这种滤波方法以它的发明者鲁道夫.E.卡尔曼（Rudolph E. Kalman）命名，原文地址 。
 卡尔曼滤波是一种递归的估计，即只要获知上一时刻状态的估计值以及当前状态的观测值就可以计算出当前状态的估计值，因此不需要记录观测或者估计的历史信息。卡尔曼滤波器与大多数滤波器不同之處，在於它是一种纯粹的时域滤波器，它不需要像低通滤波器等频域滤波器那样，需要在频域设计再转换到时域实现。
初识卡尔曼滤波  先举个简单例子说明卡尔曼滤波干嘛的，下面有三幅图，第一幅是原图，小车匀速前行，第二幅的时候可以预测出当前位置，但是越往后随着各种误差会很难判断出小车的位置了，假如我们有一个新加入的量，比如一个雷达用来探测小车位置，也就是有两种方法，误差小的时候没啥，误差大了的时候该怎么去判断小车在哪里，哪个的测量值更可靠，如何求得那个比例值，使其能够得出目前的位置。
初始小车行驶：
前进一段时间：
加入了另一种方式：
kalmanfilter方式：
数学公式介绍 下面是卡尔曼滤波算法的五大式：
公式中详细的说明了滤波方法的步骤，主要如下（用的符号有点不同，意思一样）： 首先给出一个控制理论中公式
卡尔曼滤波就是利用状态过程噪声和测量噪声对状态进行估计。 一个状态在一个时刻点k的状态进入下一个时刻点k+1状态，会有很多外界因素的干扰，我们把干扰就叫做过程噪声，用w表示。任何一个测量仪器，都会有误差，我们把这个误差叫做量测噪声，用v表示。 回到上面那个公式，状态方程表示状态在不断的更新，从一个时刻点进入下一个时刻点，这个很好理解。关键是量测方程，它表示，我们不断更新的状态有几个能用测量仪器测出来，比如，汽车运动状态参数有很多，比如速度，轮速，滑移率等，但是我们只能测量出轮速，因此量测方程要做的就是把状态参数中能量测的状态拿出来。
演化过程 1.首先假定我们只有一个线性方程求取下一时刻的位置信息
2.不考虑测量噪声取出能测量的状态，也很简单：
3.用测量仪器测量出来的状态值（大家可以考虑到：测量的值就是被各种噪声干扰后的真实值）减去上面不考虑噪声得到的测量值：
这个值在数学上是一个定义值，叫做新息，有很多有趣的性质，感兴趣的可以自己谷歌。 我们对步骤暂且停一停。这个叫新息的值有什么用？由上面的过程我们可以明显看到，它反映了过程噪声和测量噪声综合对测量状态值的影响，也就是它包含了w和v的情况。 一个数值c由两部分内容a和b组成，那么怎样用数学表达式来表达？ 一般有两种做法： I.直接相加：c=a+b; II. 用比例的方法：a=n*c,b=(1-n)c 卡尔曼采用了方法II，用比例的方法来做（其实这也是为什么叫做滤波的原因，因为滤波就是给权值之类的操作）。也就是说，过程噪声w=新息一个比例。这样得到的过程噪声加上原来（第一步）不考虑过程噪声的状态值不就是优化值了吗？ 也就是：
Okay，都写到这里了，有必要做一下前提假设： a. 什么高斯噪声，均值为零一堆； b.Ak,Ck,wk的协方差Q,vk的协方差R，系统协方差初始值P0,状态初始值X0，都已知。 那么到目前为止我们的思路就是清楚了，找到一个合适的Hk值（卡尔曼增益），那么我们就能得到状态的最优值。
这是误差协方差矩阵。 思路：使得误差协方差矩阵Pk最小的Hk。 为什么？这里我从感观的角度说明自己的理解，欢迎讨论。 协方差表示什么，协方差表示两者之间的联系或者关系，关系越大，协方差越大。误差协方差越小说明过程噪声和量测噪声的关系越小。关系越小能做什么，这要回到我们第3步讨论的我们用比例的方法分开了w和v。用比例分开，到底多少属于w，多少是v，如果关系越小，分开的越精确，比如一堆白砂糖和盐，如果两种混合的很均匀，我们说它关系很大，也就越难用比例的方法将其分开。 4.求的误差协方差矩阵Pk
自然是把里面的Xk先得到，然后公式运算，通过上面的步骤我们也容易得到：
然后复杂的数学计算，和之前假设的高斯噪声，新息的性质之类，就能得到下面的卡尔曼滤波递推公式：
通过上面的解释，我们也就不难知道这些公式都在干嘛，知道干嘛就可以了。在知道A,C,P0,Q,R的情况下，整个公式的运算流程也都很清晰了。
Python下代码如下所示：
 #coding=utf-8 import numpy import pylab #这里是假设A=1，H=1的情况 # 参数初始化 n_iter = 50 sz = (n_iter,) # size of array x = -0.</description>
    </item>
    
  </channel>
</rss>