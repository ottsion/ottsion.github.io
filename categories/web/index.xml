<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on 静心明志</title>
    <link>https://ottsion.github.io/categories/web/</link>
    <description>Recent content in web on 静心明志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 May 2019 14:18:53 +0800</lastBuildDate>
    
	<atom:link href="https://ottsion.github.io/categories/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>跨域访问api</title>
      <link>https://ottsion.github.io/2019/%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AEapi/</link>
      <pubDate>Wed, 08 May 2019 14:18:53 +0800</pubDate>
      
      <guid>https://ottsion.github.io/2019/%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AEapi/</guid>
      <description>主程序使用java构建了完整的算法，想快速通过简易前端实现效果可视化的时候产生了跨域访问失败问题，java部分api接口采用springboot快捷提供，前端采用python的flask快速开发。
前端使用ajax访问其他web服务的后端接口时很容易出现因跨域访问而导致接口调用失败的问题，以下介绍如何使用CORS解决这两个框架的跨域访问问题。
CORS是一种允许当前域（domain）的资源（比如html/js/web service）被其他域（domain）的脚本请求访问的机制，通常由于同域安全策略（the same-origin security policy）浏览器会禁止这种跨域请求。
我们需要在两者分别修改代码实现跨域访问
SpringBoot框架解决方案 在Application类(启动类)里增加CorsFilter的Bean的定义：
package com.ecm;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.Bean;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import org.springframework.web.filter.CorsFilter;@SpringBootApplication@MapperScan(&amp;#34;com.ecm.dao&amp;#34;)public class EcmApplication {public static void main(String[] args) {SpringApplication.run(EcmApplication.class, args);}@Beanpublic CorsFilter corsFilter() {final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();final CorsConfiguration config = new CorsConfiguration();config.setAllowCredentials(true); // 允许cookies跨域 config.addAllowedOrigin(&amp;#34;*&amp;#34;);// #允许向该服务器提交请求的URI，*表示全部允许，在SpringMVC中，如果设成*，会自动转成当前请求头中的Origin config.addAllowedHeader(&amp;#34;*&amp;#34;);// #允许访问的头信息,*表示全部 config.setMaxAge(18000L);// 预检请求的缓存时间（秒），即在这个时间段里，对于相同的跨域请求不会再预检了 config.</description>
    </item>
    
    <item>
      <title>js的ajax方式</title>
      <link>https://ottsion.github.io/2019/js%E7%9A%84ajax%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 08 May 2019 14:01:43 +0800</pubDate>
      
      <guid>https://ottsion.github.io/2019/js%E7%9A%84ajax%E6%96%B9%E5%BC%8F/</guid>
      <description>JS通过ajax调用接口实现数据传送，第一种方式为设置button的点击onclick方法，第二种通过绑定bind点击事件获得访问
用onclick方式：
&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta http-equiv=&amp;#34;content-type&amp;#34; content=&amp;#34;text/html; charset=UTF-8&amp;#34;&amp;gt;&amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt;&amp;lt;!--src值为文件位置路径 --&amp;gt;&amp;lt;script type=&amp;#34;text/javascript&amp;#34; charset=&amp;#34;UTF-8&amp;#34; src=&amp;#34;javascript/jquery-1.12.1.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;title&amp;gt;测试案例&amp;lt;/title&amp;gt;&amp;lt;!--语法：jQuery.getJSON(url,data,success(data,status,xhr)) --&amp;gt;&amp;lt;script type=&amp;#34;text/javascript&amp;#34; charset=&amp;#34;UTF-8&amp;#34;&amp;gt;function getToken(){$.getJSON(&amp;#34;http://localhost/kdapi/api/access_token&amp;#34;, {&amp;#34;id&amp;#34;:111,&amp;#34;secret&amp;#34;:2352532}, function(result){alert(result.access_token);});}&amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;button onclick=&amp;#34;getToken()&amp;#34; style=&amp;#34;width: 120px; height: 60px;&amp;#34;&amp;gt;获取Token&amp;lt;/button&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;</description>
    </item>
    
  </channel>
</rss>