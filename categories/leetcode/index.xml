<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on 静心明志</title>
    <link>https://ottsion.github.io/categories/leetcode/</link>
    <description>Recent content in leetcode on 静心明志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 May 2019 17:37:20 +0800</lastBuildDate>
    
	<atom:link href="https://ottsion.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>组合总和</title>
      <link>https://ottsion.github.io/2019/%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</link>
      <pubDate>Fri, 24 May 2019 17:37:20 +0800</pubDate>
      
      <guid>https://ottsion.github.io/2019/%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</guid>
      <description>题目 给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。
candidates 中的数字可以无限制重复被选取。
说明：
 所有数字（包括 target）都是正整数。 解集不能包含重复的组合。  示例 1:
输入: candidates = [2,3,6,7], target = 7, 所求解集为: [ [7], [2,2,3] ]  示例 2:
输入: candidates = [2,3,5], target = 8, 所求解集为: [ [2,2,2,2], [2,3,3], [3,5] ]  代码 class Solution { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ans = new ArrayList&amp;lt;&amp;gt;();; public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; combinationSum(int[] candidates, int target) { List&amp;lt;Integer&amp;gt; temp = new ArrayList&amp;lt;Integer&amp;gt;(); getAns(candidates, target, 0, 0, temp); return ans; } private void getAns(int[] candidates, int target, int pos, int sum, List&amp;lt;Integer&amp;gt; temp) { if(sum==target) ans.</description>
    </item>
    
    <item>
      <title>829.连续整数求和</title>
      <link>https://ottsion.github.io/2019/%E8%BF%9E%E7%BB%AD%E6%95%B4%E6%95%B0%E6%B1%82%E5%92%8C/</link>
      <pubDate>Fri, 24 May 2019 16:59:00 +0800</pubDate>
      
      <guid>https://ottsion.github.io/2019/%E8%BF%9E%E7%BB%AD%E6%95%B4%E6%95%B0%E6%B1%82%E5%92%8C/</guid>
      <description>题目 给定一个正整数 N，试求有多少组连续正整数满足所有数字之和为 N?
示例 1:
输入: 5 输出: 2 解释: 5 = 5 = 2 + 3，共有两组连续整数([5],[2,3])求和后为 5。  示例 2:
输入: 9 输出: 3 解释: 9 = 9 = 4 + 5 = 2 + 3 + 4  示例 3:
输入: 15 输出: 4 解释: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5  说明: 1 &amp;lt;= N &amp;lt;= 10 ^ 9</description>
    </item>
    
    <item>
      <title>12.整数转罗马数字</title>
      <link>https://ottsion.github.io/2019/%E6%95%B0%E5%AD%97%E8%BD%AC%E7%BD%97%E9%A9%AC/</link>
      <pubDate>Fri, 24 May 2019 16:57:00 +0800</pubDate>
      
      <guid>https://ottsion.github.io/2019/%E6%95%B0%E5%AD%97%E8%BD%AC%E7%BD%97%E9%A9%AC/</guid>
      <description>题目 罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。
字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000  例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
 I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。  给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</description>
    </item>
    
    <item>
      <title>11.盛最多水的容器</title>
      <link>https://ottsion.github.io/2019/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Thu, 09 May 2019 16:57:00 +0800</pubDate>
      
      <guid>https://ottsion.github.io/2019/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>给定 n 个非负整数 *a*1，*a*2，&amp;hellip;，*a*n，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
说明：你不能倾斜容器，且 n 的值至少为 2。
图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
示例:
输入: [1,8,6,2,5,4,8,3,7] 输出: 49  代码：
class Solution { public int maxArea(int[] height) { int maxeara = 0; int i=0, j=height.length-1; while(i&amp;lt;j){ maxeara = Math.max(maxeara, Math.min(height[i], height[j])*(j-i)); if(height[i]&amp;gt;height[j]) j--; else i++; } return maxeara; } }  </description>
    </item>
    
  </channel>
</rss>