<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>静心明志 on 静心明志</title>
    <link>https://fengcai-sun.github.io/</link>
    <description>Recent content in 静心明志 on 静心明志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jul 2019 16:57:00 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>神经网路语言模型(NNLM)</title>
      <link>https://fengcai-sun.github.io/2019/nnlm/</link>
      <pubDate>Tue, 09 Jul 2019 16:57:00 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/nnlm/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这是一个很简单的语言模型，直接看代码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim

sentiences = [&amp;quot;i like dog&amp;quot;, &amp;quot;i love coffee&amp;quot;, &amp;quot;i hate milk&amp;quot;]

word_list = &amp;quot; &amp;quot;.join(sentiences).split()
word_list = list(set(word_list))
word_dict = {w:i for i,w in enumerate(word_list)}
number_dict = {i:w for i,w in enumerate(word_list)}
n_class = len(word_dict)

n_step = 2
n_hidden = 2
embedDim = 2

def make_batch(sentiences):
    input_batch = []
    target_batch = []
    for sen in sentiences:
        words = sen.split()
        input = [word_dict[word] for word in words[:-1]]
        target = word_dict[words[-1]]
        input_batch.append(input)
        target_batch.append(target)
    return input_batch, target_batch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;神经网路语言模型(NNLM)的结构图：
&lt;img src=&#34;https://fengcai-sun.github.io/images/blog/NNLM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class NNLM(nn.Module):
    def __init__(self, n_class, n_step, embedDim, hiddenDim):
        super(NNLM, self).__init__()
        self.n_class = n_class
        self.n_step = n_step
        self.embedDim = embedDim
        self.hiddenDim = hiddenDim
        self.embedding = nn.Embedding(self.n_class, self.embedDim)  # 指图片中Ｃ矩阵效果
        self.H = nn.Parameter(torch.randn(self.n_step * self.embedDim, self.hiddenDim)).type(torch.FloatTensor)
        self.W = nn.Parameter(torch.randn(self.n_step * self.embedDim, self.n_class)).type(torch.FloatTensor)
        self.d = nn.Parameter(torch.randn(self.hiddenDim)).type(torch.FloatTensor)
        self.U = nn.Parameter(torch.randn(self.hiddenDim, self.n_class)).type(torch.FloatTensor)
        self.b = nn.Parameter(torch.randn(self.n_class)).type(torch.FloatTensor)
    def forward(self, x):
        x = self.embedding(x)
        x = x.view(-1, self.n_step * self.embedDim)
        tanh = torch.tanh(self.d + torch.mm(x, self.H))   # [batch_size, hiddenDim]
        output = self.b + torch.mm(x, self.W) + torch.mm(tanh, self.U)
        return output

model = NNLM(n_class, n_step, embedDim, n_hidden)

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

input_batch, target_batch = make_batch(sentiences)
input_batch = torch.LongTensor(input_batch)
target_batch = torch.LongTensor(target_batch)
print(input_batch)
print(target_batch)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：
    tensor([[5, 2],
            [5, 3],
            [5, 0]])
    tensor([1, 6, 4])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for epoch in range(5000):
    optimizer.zero_grad()
    output = model(inpit_batch)
    loss = criterion(output, target_batch)
    if epoch%1000 == 0:
        print(&#39;Epoch: {%04d}, cost:{%.6f}&#39; % (epoch, loss))
    loss.backward()
    optimizer.step()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：
    Epoch: {0000}, cost:{0.002199}
    Epoch: {1000}, cost:{0.001139}
    Epoch: {2000}, cost:{0.000612}
    Epoch: {3000}, cost:{0.000336}
    Epoch: {4000}, cost:{0.000187}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(input_batch)
predict = model(input_batch)
predict = torch.max(predict.data, 1)[1].numpy() 
print(predict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：
    tensor([[5, 2],
            [5, 3],
            [5, 0]])
    [1 6 4]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print([sen.split()[:2] for sen in sentences], &#39;-&amp;gt;&#39;, [number_dict[n.item()] for n in predict.squeeze()])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：
    [[&amp;lsquo;i&amp;rsquo;, &amp;lsquo;like&amp;rsquo;], [&amp;lsquo;i&amp;rsquo;, &amp;lsquo;love&amp;rsquo;], [&amp;lsquo;i&amp;rsquo;, &amp;lsquo;hate&amp;rsquo;]] -&amp;gt; [&amp;lsquo;dog&amp;rsquo;, &amp;lsquo;coffee&amp;rsquo;, &amp;lsquo;milk&amp;rsquo;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>39.组合总和</title>
      <link>https://fengcai-sun.github.io/2019/%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</link>
      <pubDate>Fri, 24 May 2019 17:37:20 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</guid>
      <description>

&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;给定一个&lt;strong&gt;无重复元素&lt;/strong&gt;的数组 &lt;code&gt;candidates&lt;/code&gt; 和一个目标数 &lt;code&gt;target&lt;/code&gt; ，找出 &lt;code&gt;candidates&lt;/code&gt; 中所有可以使数字和为 &lt;code&gt;target&lt;/code&gt; 的组合。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;candidates&lt;/code&gt; 中的数字可以无限制重复被选取。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;所有数字（包括 &lt;code&gt;target&lt;/code&gt;）都是正整数。&lt;/li&gt;
&lt;li&gt;解集不能包含重复的组合。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: candidates = [2,3,6,7], target = 7,
所求解集为:
[
  [7],
  [2,2,3]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: candidates = [2,3,5], target = 8,
所求解集为:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Solution {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ans = new ArrayList&amp;lt;&amp;gt;();;
	
    public  List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; combinationSum(int[] candidates, int target) {
    	List&amp;lt;Integer&amp;gt; temp = new ArrayList&amp;lt;Integer&amp;gt;();
    	getAns(candidates, target, 0, 0, temp);
        return ans;
    }
	
	private  void getAns(int[] candidates, int target, int pos, int sum, List&amp;lt;Integer&amp;gt; temp) {
		if(sum==target)
			ans.add(new ArrayList&amp;lt;&amp;gt;(temp));
		for(int i=pos; i&amp;lt;candidates.length; i++) {
			if(sum+candidates[i] &amp;lt;=target) {
				temp.add(candidates[i]);
				getAns(candidates, target, i, sum+candidates[i], temp);
				temp.remove(temp.size()-1);
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>829.连续整数求和</title>
      <link>https://fengcai-sun.github.io/2019/%E8%BF%9E%E7%BB%AD%E6%95%B4%E6%95%B0%E6%B1%82%E5%92%8C/</link>
      <pubDate>Fri, 24 May 2019 16:59:00 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/%E8%BF%9E%E7%BB%AD%E6%95%B4%E6%95%B0%E6%B1%82%E5%92%8C/</guid>
      <description>

&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;给定一个正整数 &lt;code&gt;N&lt;/code&gt;，试求有多少组连续正整数满足所有数字之和为 &lt;code&gt;N&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示&lt;/strong&gt;&lt;strong&gt;例 1:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: 5
输出: 2
解释: 5 = 5 = 2 + 3，共有两组连续整数([5],[2,3])求和后为 5。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: 9
输出: 3
解释: 9 = 9 = 4 + 5 = 2 + 3 + 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例 3:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: 15
输出: 4
解释: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt; &lt;code&gt;1 &amp;lt;= N &amp;lt;= 10 ^ 9&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Solution {
    public int consecutiveNumbersSum(int N) {
       int res = 0;
        for (int i = 1; N &amp;gt; 0; N -= i++)
            if(N % i == 0)
                res++;
        return res; 
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>12.整数转罗马数字</title>
      <link>https://fengcai-sun.github.io/2019/%E6%95%B0%E5%AD%97%E8%BD%AC%E7%BD%97%E9%A9%AC/</link>
      <pubDate>Fri, 24 May 2019 16:57:00 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/%E6%95%B0%E5%AD%97%E8%BD%AC%E7%BD%97%E9%A9%AC/</guid>
      <description>

&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;

&lt;p&gt;罗马数字包含以下七种字符： &lt;code&gt;I&lt;/code&gt;， &lt;code&gt;V&lt;/code&gt;， &lt;code&gt;X&lt;/code&gt;， &lt;code&gt;L&lt;/code&gt;，&lt;code&gt;C&lt;/code&gt;，&lt;code&gt;D&lt;/code&gt; 和 &lt;code&gt;M&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如， 罗马数字 2 写做 &lt;code&gt;II&lt;/code&gt; ，即为两个并列的 1。12 写做 &lt;code&gt;XII&lt;/code&gt; ，即为 &lt;code&gt;X&lt;/code&gt; + &lt;code&gt;II&lt;/code&gt; 。 27 写做  &lt;code&gt;XXVII&lt;/code&gt;, 即为 &lt;code&gt;XX&lt;/code&gt; + &lt;code&gt;V&lt;/code&gt; + &lt;code&gt;II&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 &lt;code&gt;IIII&lt;/code&gt;，而是 &lt;code&gt;IV&lt;/code&gt;。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 &lt;code&gt;IX&lt;/code&gt;。这个特殊的规则只适用于以下六种情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;I&lt;/code&gt; 可以放在 &lt;code&gt;V&lt;/code&gt; (5) 和 &lt;code&gt;X&lt;/code&gt; (10) 的左边，来表示 4 和 9。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt; 可以放在 &lt;code&gt;L&lt;/code&gt; (50) 和 &lt;code&gt;C&lt;/code&gt; (100) 的左边，来表示 40 和 90。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; 可以放在 &lt;code&gt;D&lt;/code&gt; (500) 和 &lt;code&gt;M&lt;/code&gt; (1000) 的左边，来表示 400 和 900。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: 3
输出: &amp;quot;III&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: 4
输出: &amp;quot;IV&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例 3:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: 9
输出: &amp;quot;IX&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例 4:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: 58
输出: &amp;quot;LVIII&amp;quot;
解释: L = 50, V = 5, III = 3.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例 5:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: 1994
输出: &amp;quot;MCMXCIV&amp;quot;
解释: M = 1000, CM = 900, XC = 90, IV = 4.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解决代码&#34;&gt;解决代码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static String intToRoman(int num) {
        String[] keys = new String[]{&amp;quot;M&amp;quot;,&amp;quot;CM&amp;quot;,&amp;quot;D&amp;quot;,&amp;quot;CD&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;XC&amp;quot;,&amp;quot;L&amp;quot;,&amp;quot;XL&amp;quot;,&amp;quot;X&amp;quot;,&amp;quot;IX&amp;quot;,&amp;quot;V&amp;quot;,&amp;quot;IV&amp;quot;,&amp;quot;I&amp;quot;};
        int[] values = new int[]{1000,900,500,400,100,90,50,40,10,9,5,4,1};
        
        StringBuilder code = new StringBuilder();
        int beishu = 0;
        for(int i=0; i&amp;lt;keys.length; i++) {
            beishu = num / values[i];
            num = num % values[i];
            for(int k=0; k&amp;lt;beishu; k++)
                code.append(keys[i]);
        }
        return code.toString();
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>198.打家劫舍</title>
      <link>https://fengcai-sun.github.io/2019/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</link>
      <pubDate>Thu, 09 May 2019 17:45:45 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</guid>
      <description>&lt;p&gt;你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，&lt;strong&gt;如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;给定一个代表每个房屋存放金额的非负整数数组，计算你&lt;strong&gt;在不触动警报装置的情况下，&lt;/strong&gt;能够偷窃到的最高金额。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: [2,7,9,3,1]
输出: 12
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;代码：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static int rob(int[] nums) {
        int length = nums.length;
        if(length == 0)
            return 0;
        int before=0, now=0, temp=0;
        for(int i=0; i&amp;lt;length; i++){
            if(i==0)
                now = nums[0];
            else if(i==1){
                before = now;
                now = Math.max(nums[0], nums[1]);
            }
            else if(i&amp;gt;=2){
                temp = Math.max(before+nums[i], now);
                before = now;
                now = temp;
            }
        }
        return now;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>11.盛最多水的容器</title>
      <link>https://fengcai-sun.github.io/2019/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Thu, 09 May 2019 16:57:00 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>&lt;p&gt;给定 &lt;em&gt;n&lt;/em&gt; 个非负整数 *a*1，*a*2，&amp;hellip;，*a*n，每个数代表坐标中的一个点 (&lt;em&gt;i&lt;/em&gt;, &lt;em&gt;ai&lt;/em&gt;) 。在坐标内画 &lt;em&gt;n&lt;/em&gt; 条垂直线，垂直线 &lt;em&gt;i&lt;/em&gt; 的两个端点分别为 (&lt;em&gt;i&lt;/em&gt;, &lt;em&gt;ai&lt;/em&gt;) 和 (&lt;em&gt;i&lt;/em&gt;, 0)。找出其中的两条线，使得它们与 &lt;em&gt;x&lt;/em&gt; 轴共同构成的容器可以容纳最多的水。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;你不能倾斜容器，且 &lt;em&gt;n&lt;/em&gt; 的值至少为 2。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://fengcai-sun.github.io/images/blog/盛最多水的容器.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;输入: [1,8,6,2,5,4,8,3,7]
输出: 49
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;代码：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Solution {
    public int maxArea(int[] height) {
        int maxeara = 0;
        int i=0, j=height.length-1;
        while(i&amp;lt;j){
            maxeara = Math.max(maxeara, Math.min(height[i], height[j])*(j-i));
            if(height[i]&amp;gt;height[j]) j--;
            else i++;
        }
        return maxeara;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>跨域访问api</title>
      <link>https://fengcai-sun.github.io/2019/%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AEapi/</link>
      <pubDate>Wed, 08 May 2019 14:18:53 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AEapi/</guid>
      <description>

&lt;p&gt;主程序使用java构建了完整的算法，想快速通过简易前端实现效果可视化的时候产生了跨域访问失败问题，java部分api接口采用springboot快捷提供，前端采用python的flask快速开发。&lt;/p&gt;

&lt;p&gt;前端使用ajax访问其他web服务的后端接口时很容易出现因跨域访问而导致接口调用失败的问题，以下介绍如何使用CORS解决这两个框架的跨域访问问题。&lt;/p&gt;

&lt;p&gt;CORS是一种允许当前域（domain）的资源（比如html/js/web service）被其他域（domain）的脚本请求访问的机制，通常由于同域安全策略（the same-origin security policy）浏览器会禁止这种跨域请求。&lt;/p&gt;

&lt;p&gt;我们需要在两者分别修改代码实现跨域访问&lt;/p&gt;

&lt;h2 id=&#34;springboot框架解决方案&#34;&gt;SpringBoot框架解决方案&lt;/h2&gt;

&lt;p&gt;在Application类(启动类)里增加CorsFilter的Bean的定义：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.ecm;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

@SpringBootApplication
@MapperScan(&amp;quot;com.ecm.dao&amp;quot;)
public class EcmApplication {
    public static void main(String[] args) {
        SpringApplication.run(EcmApplication.class, args);
    }

    @Bean
    public CorsFilter corsFilter() {
        final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        final CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true); // 允许cookies跨域
        config.addAllowedOrigin(&amp;quot;*&amp;quot;);// #允许向该服务器提交请求的URI，*表示全部允许，在SpringMVC中，如果设成*，会自动转成当前请求头中的Origin
        config.addAllowedHeader(&amp;quot;*&amp;quot;);// #允许访问的头信息,*表示全部
        config.setMaxAge(18000L);// 预检请求的缓存时间（秒），即在这个时间段里，对于相同的跨域请求不会再预检了
        config.addAllowedMethod(&amp;quot;OPTIONS&amp;quot;);// 允许提交请求的方法，*表示全部允许
        config.addAllowedMethod(&amp;quot;HEAD&amp;quot;);
        config.addAllowedMethod(&amp;quot;GET&amp;quot;);// 允许Get的请求方法
        config.addAllowedMethod(&amp;quot;PUT&amp;quot;);
        config.addAllowedMethod(&amp;quot;POST&amp;quot;);
        config.addAllowedMethod(&amp;quot;DELETE&amp;quot;);
        config.addAllowedMethod(&amp;quot;PATCH&amp;quot;);
        source.registerCorsConfiguration(&amp;quot;/**&amp;quot;, config);
        return new CorsFilter(source);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flask框架解决方案&#34;&gt;Flask框架解决方案&lt;/h2&gt;

&lt;h3 id=&#34;安装flask-cors包&#34;&gt;安装flask_cors包&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pip install flask-cors&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;使用flask-cors包&#34;&gt;使用flask_cors包&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;-*- coding: utf-8 -*-
from flask import Flask
from flask_cors import *
app = Flask(__name__)
CORS(app, supports_credentials=True)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>js的ajax方式</title>
      <link>https://fengcai-sun.github.io/2019/js%E7%9A%84ajax%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 08 May 2019 14:01:43 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/js%E7%9A%84ajax%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;JS通过ajax调用接口实现数据传送，第一种方式为设置button的点击&lt;code&gt;onclick&lt;/code&gt;方法，第二种通过绑定&lt;code&gt;bind&lt;/code&gt;点击事件获得访问&lt;/p&gt;

&lt;p&gt;用&lt;code&gt;onclick&lt;/code&gt;方式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html; charset=UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
    &amp;lt;!-- src值为文件位置路径 --&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;UTF-8&amp;quot; src=&amp;quot;javascript/jquery-1.12.1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;title&amp;gt;测试案例&amp;lt;/title&amp;gt;
    &amp;lt;!-- 语法：jQuery.getJSON(url,data,success(data,status,xhr)) --&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
        function getToken(){
            $.getJSON(&amp;quot;http://localhost/kdapi/api/access_token&amp;quot;, {&amp;quot;id&amp;quot;:111,&amp;quot;secret&amp;quot;:2352532}, function(result){
                alert(result.access_token);
            });
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;button onclick=&amp;quot;getToken()&amp;quot; style=&amp;quot;width: 120px; height: 60px;&amp;quot;&amp;gt;获取Token&amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>方法超时放弃执行</title>
      <link>https://fengcai-sun.github.io/2019/%E6%96%B9%E6%B3%95%E8%B6%85%E6%97%B6%E6%94%BE%E5%BC%83%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Sun, 05 May 2019 16:58:24 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/%E6%96%B9%E6%B3%95%E8%B6%85%E6%97%B6%E6%94%BE%E5%BC%83%E6%89%A7%E8%A1%8C/</guid>
      <description>&lt;p&gt;遇到一个比较不常见的情况，我在流水线式执行一个方法，方法中涉及到数据的获取，有时候获取很快，有时候十几分钟都没结果，因为我这个任务要追求时间效率，可以牺牲小部分异常，所以想到方法超时放弃这个想法：如果这个方法执行超过60秒，就直接pass继续执行下一次。&lt;/p&gt;

&lt;p&gt;具体其实是应用线程去实现这个想法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;


import com.sun.corba.se.impl.orbutil.closure.Future;
import com.sun.corba.se.impl.orbutil.threadpool.TimeoutException;
public class ThreadTest {  
  
    public static void main(String[] args) throws InterruptedException,  
            ExecutionException {  
          
        final ExecutorService exec = Executors.newFixedThreadPool(1);  
          
        Callable&amp;lt;String&amp;gt; task = new Callable&amp;lt;String&amp;gt;() {  
            public String call() throws Exception {  
                //开始执行耗时操作  
                Thread.sleep(1000 * 5);  
                return &amp;quot;线程执行完成.&amp;quot;;  
            }  
        };  
          
        try {  
            Future&amp;lt;String&amp;gt; future = exec.submit(task);  
            String obj = future.get(1, TimeUnit.SECOND); //任务处理超时时间设为 1 秒  
            System.out.println(&amp;quot;任务成功返回:&amp;quot; + obj);  
        } catch (TimeoutException ex) {  
            System.out.println(&amp;quot;处理超时啦....&amp;quot;);  
            ex.printStackTrace();  
        } catch (Exception e) {  
            System.out.println(&amp;quot;处理失败.&amp;quot;);  
            e.printStackTrace();  
        }  
        // 关闭线程池  
        exec.shutdown();  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://fengcai-sun.github.io/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fengcai-sun.github.io/about/</guid>
      <description>&lt;p&gt;Hugo is the &lt;strong&gt;world’s fastest framework for building websites&lt;/strong&gt;. It is written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/russross/blackfriday&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/russross/blackfriday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/chroma&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/alecthomas/chroma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/muesli/smartcrop&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/muesli/smartcrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/spf13/viper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>